name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 基本テスト（ユニット・インテグレーション）
  basic-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
        include:
          - rust: beta
            allow-failure: true
    continue-on-error: ${{ matrix.allow-failure || false }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: basic-tests-${{ runner.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          basic-tests-${{ runner.os }}-${{ matrix.rust }}-

    - name: Build
      run: cargo build --verbose

    - name: Run unit tests
      run: cargo test --verbose

    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

    - name: Run CGI integration tests
      run: cargo test --verbose --test cgi_integration_test

  # Feature別テスト
  feature-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [lambda, cloud_run, cgi, all-features]
        include:
          - feature: all-features
            flag: --all-features

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: feature-tests-${{ runner.os }}-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          feature-tests-${{ runner.os }}-${{ matrix.feature }}-

    - name: Test with ${{ matrix.feature }} feature
      run: |
        if [ "${{ matrix.feature }}" = "all-features" ]; then
          cargo test --verbose --all-features
        else
          cargo test --verbose --features ${{ matrix.feature }}
        fi

  # ビルド・ドキュメント・Example確認
  build-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: build-tests-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          build-tests-${{ runner.os }}-

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Check examples compilation
      run: |
        echo "Building examples..."
        for example_dir in example/*; do
          if [ -d "$example_dir" ] && [ -f "$example_dir/Cargo.toml" ]; then
            echo "Building example: $(basename $example_dir)"
            cd "$example_dir"
            # デフォルト機能でビルド
            echo "  - Building with default features"
            cargo check
            cargo build
            # 各機能を個別にテスト
            echo "  - Building with lambda feature"
            cargo check --features lambda --no-default-features
            cargo build --features lambda --no-default-features
            echo "  - Building with cloud_run feature"  
            cargo check --features cloud_run --no-default-features
            cargo build --features cloud_run --no-default-features
            echo "  - Building with cgi feature"
            cargo check --features cgi --no-default-features
            cargo build --features cgi --no-default-features
            cd - > /dev/null
          fi
        done

    - name: Check examples in examples directory
      run: |
        if [ -f "examples/custom_headers.rs" ]; then
          echo "Checking examples directory files..."
          # デフォルト機能でチェック
          echo "  - Checking with default features"
          cargo check --examples
          cargo build --examples
          # 各機能を個別にテスト
          echo "  - Checking with lambda feature"
          cargo check --examples --features lambda
          cargo build --examples --features lambda
          echo "  - Checking with cloud_run feature"
          cargo check --examples --features cloud_run
          cargo build --examples --features cloud_run
          echo "  - Checking with cgi feature"
          cargo check --examples --features cgi
          cargo build --examples --features cgi
        fi

    - name: Clean previous build artifacts
      run: |
        echo "前のビルド成果物をクリーンアップします..."
        for example_dir in example/*; do
          if [ -d "$example_dir" ] && [ -f "$example_dir/Cargo.toml" ]; then
            echo "Cleaning example: $(basename $example_dir)"
            (cd "$example_dir" && cargo clean)
          fi
        done
        # `examples/` 配下に独立クレートがあれば個別クリーン
        for example_dir in examples/*; do
          if [ -d "$example_dir" ] && [ -f "$example_dir/Cargo.toml" ]; then
            echo "Cleaning examples crate: $(basename $example_dir)"
            (cd "$example_dir" && cargo clean)
          fi
        done
        # ルートで最終的に一括クリーン
        cargo clean

  # Shell統合テスト（CGI, Lambda）
  integration-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Setup Python for Lambda tests
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: integration-tests-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          integration-tests-${{ runner.os }}-

    - name: Run example shell tests
      run: |
        echo "Running example hello world shell tests..."
        
        # CGI テスト実行
        echo "Running CGI integration tests..."
        if [ -f "example/helloworld/test_cgi.sh" ]; then
          chmod +x example/helloworld/test_cgi.sh
          cd example/helloworld
          ./test_cgi.sh
          cd ../..
        fi
        
        # Lambda テスト実行（Python3が必要）
        echo "Running Lambda integration tests..."
        if [ -f "example/helloworld/test_lambda.sh" ]; then
          chmod +x example/helloworld/test_lambda.sh
          cd example/helloworld
          ./test_lambda.sh
          cd ../..
        fi

  # Docker統合テスト（Cloud Run）
  docker-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docker-tests-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          docker-tests-${{ runner.os }}-

    - name: Run Cloud Run shell tests
      run: |
        # Cloud Run テスト実行（Dockerが必要）
        echo "Running Cloud Run integration tests..."
        if [ -f "example/helloworld/test_cloudrun.sh" ]; then
          # Dockerイメージをビルド
          docker build -t runbridge-hello-world:test -f example/helloworld/Dockerfile .
          
          chmod +x example/helloworld/test_cloudrun.sh
          cd example/helloworld
          ./test_cloudrun.sh
          cd ../..
        fi

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Rust キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true 